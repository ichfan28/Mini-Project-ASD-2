class Node:
    def __init__(self, nama, jenis, usia, jumlah):
        self.nama = nama
        self.jenis = jenis
        self.usia = usia
        self.jumlah = jumlah
        self.next = None

class Peternakan:
    def __init__(self):
        self.head = None

    def tambah_hewan(self, nama, jenis, usia, jumlah):
        new_node = Node(nama, jenis, usia, jumlah)
        if not self.head:
            self.head = new_node
            new_node.next = new_node  # Membuat linked list menjadi circular
        else:
            current = self.head
            while current.next != self.head:
                current = current.next
            current.next = new_node
            new_node.next = self.head

    def lihat_hewan(self):
        if not self.head:
            return "Peternakan kosong."
        current = self.head
        hewan_dict = {}
        while True:
            hewan_dict[current.nama] = {
                'jenis': current.jenis,
                'usia': current.usia,
                'jumlah': current.jumlah
            }
            current = current.next
            if current == self.head:
                break
        return hewan_dict

    def cari_node(self, nama):
        if not self.head:
            return None
        current = self.head
        while True:
            if current.nama == nama:
                return current
            current = current.next
            if current == self.head:
                break
        return None

    def update_hewan(self, nama, jenis, usia, jumlah):
        node = self.cari_node(nama)
        if node:
            node.jenis = jenis
            node.usia = usia
            node.jumlah = jumlah
            return f"Data {nama} berhasil diperbarui."
        else:
            return f"{nama} tidak ditemukan di peternakan."

    def hapus_hewan(self, nama):
        if not self.head:
            return f"{nama} tidak ditemukan di peternakan."
        
        if self.head.nama == nama:
            if self.head.next == self.head:
                self.head = None
            else:
                current = self.head
                while current.next != self.head:
                    current = current.next
                current.next = self.head.next
                self.head = self.head.next
            return f"{nama} berhasil dihapus dari peternakan."

        prev = None
        current = self.head
        while True:
            if current.nama == nama:
                prev.next = current.next
                return f"{nama} berhasil dihapus dari peternakan."
            prev = current
            current = current.next
            if current == self.head:
                break

        return f"{nama} tidak ditemukan di peternakan."



peternakan_saya = Peternakan()
peternakan_saya.tambah_hewan('Sapi', 'Sapi Limosin', 3, 7)
peternakan_saya.tambah_hewan('Ayam', 'Ayam Kampung', 4, 18)

print(peternakan_saya.lihat_hewan())

print(peternakan_saya.update_hewan('Sapi', 'Sapi Peranakan', 8, 12))

print(peternakan_saya.hapus_hewan('Ayam'))

print(peternakan_saya.lihat_hewan())
